{"version":3,"sources":["API.ts","utils.ts","components/QuestionsCard.styles.tsx","components/QuestionCard.tsx","images/janis-wolf-unsplash.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","console","log","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","CardWrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNum","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","onClick","value","GlobalStyle","createGlobalStyle","BGImg","Wrapper","TOTAL_QUESTIONS","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startQuiz","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObj","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a6f6f34.chunk.js","sourcesContent":["import { randomArray } from './utils';\n\n//setup type from api response\nexport type Question = {\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;\n}\n\n//add answers string to Question\nexport type QuestionState = Question & { answers: string[] };\n\nexport enum Difficulty {\n    EASY = \"easy\",\n    MEDIUM = \"medium\",\n    HARD = \"hard\"\n}\n\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&category=27`;\n    const data = await (await fetch(endpoint)).json();\n    console.log(data);\n    return data.results.map((question: Question) => (\n        {\n            ...question,\n            answers: randomArray([\n                ...question.incorrect_answers,\n                question.correct_answer\n            ])\n        }\n    ))\n}","export const randomArray = (array: any[]) =>\n    [...array].sort(() => Math.random() - 0.5);","import styled from 'styled-components';\n\nexport const CardWrapper = styled.div`\n    max-width: 1100px;\n    background: #ebfeff;\n    border-radius: 10px;\n    border: 2px solid #0085a3;\n    padding: 20px;\n    box-shadow: 0px 5px 10px rgba(0,0,0,0.25);\n    text-align: center;\n\n    p {\n        font-size: 1rem;\n    }\n`\n\ntype ButtonWrapperProps = {\n    correct: boolean;\n    userClicked: boolean;\n}\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n    transition: all 0.3s ease;\n\n    :hover {\n        opacity: 0.8;\n    }\n\n    button {\n        cursor: pointer;\n        user-select: none;\n        font-size: 0.8rem;\n        width: 100%;\n        height: 40px;\n        margin: 5px 0;\n        background: ${({ correct, userClicked }) =>\n        correct\n            ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\n            : !correct && userClicked\n                ? 'linear-gradient(90deg, #ff5656, #c16868)'\n                : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\n        border: 3px solid #fff;\n        box-shadow: 1px 2px 9px rgba(0,0,0,0.1);\n        border-radius: 10px;\n        color: #fff;\n        text-shadow: 0px 1px 0px rgba(0,0,0,0.25);\n    }\n`","import React from 'react';\n//types\nimport { AnswerObj } from '../App';\n//styles\nimport { CardWrapper, ButtonWrapper } from './QuestionsCard.styles';\n\ntype Props = {\n    question: string;\n    answers: string[];\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    userAnswer: AnswerObj | undefined;\n    questionNum: number;\n    totalQuestions: number;\n}\n\nconst QuestionCard: React.FC<Props> = ({ question, answers, callback, userAnswer, questionNum, totalQuestions }) => {\n    return (\n        <CardWrapper>\n            <p className=\"number\">\n                Question: {questionNum} / {totalQuestions}\n            </p>\n            <p dangerouslySetInnerHTML={{ __html: question }}></p>\n            <div>\n                {answers.map((answer) => (\n                    <ButtonWrapper\n                        key={answer}\n                        correct={userAnswer?.correctAnswer === answer}\n                        userClicked={userAnswer?.answer === answer}\n                    >\n                        <button\n                            // !! to convert to boolean value\n                            disabled={!!userAnswer}\n                            onClick={callback}\n                            value={answer}\n                        >\n                            <span dangerouslySetInnerHTML={{ __html: answer }} />\n                        </button>\n                    </ButtonWrapper>\n                ))}\n            </div>\n        </CardWrapper>\n    )\n}\n\nexport default QuestionCard;\n","export default __webpack_public_path__ + \"static/media/janis-wolf-unsplash.1235bc85.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\nimport BGImg from './images/janis-wolf-unsplash.jpg';\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        height: 100%;\n    }\n\n    body {\n        background-image: url(${BGImg});\n        background-size: cover;\n        margin: 0;\n        padding: 0 20px;\n        display: flex;\n        justify-content: center;\n    }\n\n    * {\n        box-sizing: border-box;\n        font-family: 'Catamaran', sans-serif;\n    }\n`;\n\nexport const Wrapper = styled.div`\n    margin-top: 20%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    > p {\n        color: #fff;\n    }\n\n    .score {\n        color: #fff;\n        font-size: 2rem;\n        margin: 0;\n    }\n\n    h1 {\n        font-family: 'Fascinate', cursive;\n        background-image: linear-gradient(180deg, #fff, #87F1FF);\n        background-size: 100%;\n        background-clip: text;\n        -webkit-background-clip: text;\n        -webkit-text-fill-color: transparent;\n        -moz-background-clip: text;\n        -moz-text-fill-color: transparent;\n        filter: drop-shawdow(2px 2px #0085A3);\n        font-size: 70px;\n        font-weight: 400;\n        text-align: center;\n        margin: 20px;\n    }\n\n    h2 {\n        color: #fff;\n    }\n\n    .start,\n    .next {\n        cursor: pointer;\n        background: linear-gradient(180deg, #fff, #ffcc91);\n        border: 2px solid #D38558;\n        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n        border-radius: 10px;\n        height: 40px;\n        margin: 20px 0;\n        padding: 0 40px;\n    }\n\n    .start {\n        max-width: 200px;\n    }\n`","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API';\n//components\nimport QuestionCard from './components/QuestionCard';\n//types\nimport { QuestionState, Difficulty } from './API';\n//styles\nimport { GlobalStyle } from './App.styles';\nimport { Wrapper } from './App.styles';\n\nexport type AnswerObj = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObj[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  // console.log(fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY));\n\n  const startQuiz = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      //check answer if correct\n      const correct = questions[number].correct_answer === answer;\n\n      // add score if answer is correct\n      if (correct) {\n        setScore(prev => prev + 1);\n      }\n      // save answer in user answers array\n      const answerObj = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers(prev => [...prev, answerObj]);\n    }\n  };\n\n  const nextQuestion = () => {\n    //to next if not last\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>ANIMALS QUIZ</h1>\n\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <h2>\n            Let's see how well you know your animals! Click start to begin the quiz!\n          </h2>\n        ) : null}\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <div>\n            <button\n              className=\"start\"\n              onClick={startQuiz}\n            >\n              Start\n          </button>\n          </div>\n        ) : null}\n\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n\n        {loading ? <p>Loading Questions ...</p> : null}\n\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNum={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n\n        {!gameOver\n          && !loading\n          && userAnswers.length === number + 1\n          && number !== TOTAL_QUESTIONS - 1 ? (\n          <button\n            className=\"next\"\n            onClick={nextQuestion}\n          >\n            Next Question\n          </button>\n        ) : null}\n\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}